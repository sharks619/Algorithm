# AlmostShortestPath
package Chap5_Graph_3th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class AlmostShortestPath {
	public static class Node implements Comparable<Node> {
		int to;
		int dist;
		Node(int to, int dist) {
			this.to = to;
			this.dist = dist;
		}
		public int compareTo(Node arg0) {
			return this.dist - arg0.dist;
		}
	}
	public static int N, M, S, E;
	public static int[] DP;
	public static ArrayList<Node>[] adj;
	public static ArrayList<Integer>[] parents;
	public static boolean[][] checkShortPath;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		while (true) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken()); // 장소의수
			M = Integer.parseInt(st.nextToken()); // 도로의 수			
			if(N == 0 && M == 0) break;
			st = new StringTokenizer(br.readLine());
			S = Integer.parseInt(st.nextToken()); // 출발
			E = Integer.parseInt(st.nextToken()); // 도착
			DP = new int[N];
			adj = new ArrayList[N];
			parents = new ArrayList[N];
			checkShortPath = new boolean[N][N];
			
			for(int i = 0; i < N; i++) {
				//DP[i] = Integer.MAX_VALUE;
				adj[i] = new ArrayList<>();
				parents[i] = new ArrayList<>();				
			}			
			
			for(int i = 0; i < M; i++) {
				st = new StringTokenizer(br.readLine());
				int u = Integer.parseInt(st.nextToken());
				int v = Integer.parseInt(st.nextToken());
				int p = Integer.parseInt(st.nextToken());
				adj[u].add(new Node(v, p));			
			}			
			dijkstra(S);
			backtracking(E);
			dijkstra(S);
			
			if(DP[E] == Integer.MAX_VALUE)
				bw.write("-1\n");
			else
				bw.write(DP[E] + "\n");
		}
		bw.flush();
		bw.close();
	}
	public static void backtracking(int end) {
		for(int i : parents[end]) {
			int next = i;
			if(checkShortPath[next][end] == false) {
				checkShortPath[next][end] = true;
				backtracking(next);
			}
		}
	}

	public static void dijkstra(int sNo) {
		for(int i = 0; i < N; i++)
			DP[i] = Integer.MAX_VALUE;
		PriorityQueue<Node> pq = new PriorityQueue<>();
		DP[sNo] = 0;
		pq.add(new Node(sNo, 0));
		while(!pq.isEmpty()) {
			Node o = pq.poll();
			int now = o.to;
			int nowDist = o.dist;
			
			if(nowDist > DP[now])	continue;
			
			for(Node e : adj[now]) {
				int next = e.to;				
				if(checkShortPath[now][next] == true)	continue;				
				int nextDist = e.dist + DP[now];
				if(nextDist == DP[next]) {
					parents[next].add(now);
				}else if(nextDist < DP[next]) {
					parents[next].clear();
					parents[next].add(now);					
					DP[next] = nextDist;
					pq.add(new Node(next, nextDist));
				}
			}
		}
	}
}

# NetworkConnect_Kruskcal
package Chap5_Graph_3th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class NetworkConnect_Kruskcal {
	
	public static class Computer implements Comparable<Computer>{
		int from;
		int to;
		int cost;
		Computer(int from, int to, int cost){
			this.from = from;
			this.to = to;
			this.cost = cost;
		}
		@Override
		public int compareTo(Computer arg0) {
			// 오름차순으로 하는 정렬 메소드 구현 
			return this.cost - arg0.cost;
		}
	}
	public static ArrayList<Computer> adj; // 컴퓨터 객체를 담고있는 ArrayList
	public static int N, M;		//N : 컴퓨터의수, M 선의수
	public static int[] parents;	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		
		adj = new ArrayList<>();
		parents = new int[N + 1];
		for(int i = 1; i <= N; i++)
			parents[i] = i;
		
		for(int i = 1; i <= M; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			// priorityQueue랑 달리 담기만 한다고 정렬이 안됨.
			// 따라서 compare메소드를 통해서 정렬 해줘야함. 
			adj.add(new Computer(a, b, c));
		}
		
		//정렬
		Collections.sort(adj);
		// sum된 결과치를 원함 
		long answer = 0;
		for(Computer e : adj) {
			int start = e.from;
			int end = e.to;
			int value = e.cost;
			int sRoot = find(start);
			int eRoot = find(end);			
			if(sRoot == eRoot)	continue;
			answer += value;
			parents[eRoot] = sRoot;
		}
		System.out.println(answer);
	}
	
	public static int find(int n) {
		if(parents[n] == n)
			return n;
		
		return parents[n] = find(parents[n]);
	}

}

# NetworkConnect_Prim
package Chap5_Graph_3th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class NetworkConnect_Prim {
	public static class Computer implements Comparable<Computer>{
		int to;
		int cost;
		Computer(int to, int cost){
			this.to = to;
			this.cost = cost;
		}
		@Override
		public int compareTo(Computer arg0) {
			// TODO Auto-generated method stub
			return this.cost - arg0.cost;
		}
	}
	public static ArrayList<Computer>[] adj;
	public static int N, M;				//N : 컴퓨터의수, M 선의수
	public static boolean[] visited;	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		
		visited = new boolean[N + 1];
		adj = new ArrayList[N + 1];
		for(int i = 1; i <= N; i++)
			adj[i] = new ArrayList<>();
		
		for(int i = 1; i <= M; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			int c = Integer.parseInt(st.nextToken());
			adj[a].add(new Computer(b, c));
			adj[b].add(new Computer(a, c));
		}		
		
		int answer = 0;
		PriorityQueue<Computer> pq = new PriorityQueue<>();		
		pq.add(new Computer(1, 0));
		while(!pq.isEmpty()) {
			Computer c = pq.poll();
			int now = c.to;
			int nowCost = c.cost;
			if(visited[now] == true) continue; 
			answer += nowCost;
			visited[now] = true;
			
			for(Computer e : adj[now]) {
				if(!visited[e.to])					
					pq.add(e);
			}	
		}		
		
		System.out.println(answer);
	}
	
}
