# Main_1655_가운데를말해요
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.PriorityQueue;

public class Main_1655_가운데를말해요 {
    static int N;
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringBuilder sb = new StringBuilder();

        N = Integer.parseInt(br.readLine());

        // pq 두 개의 element 갯수를 맞춰가면서 써보자.
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        for(int i=0; i<N; i++){
            int x = Integer.parseInt(br.readLine());

            if(maxHeap.size() == minHeap.size()){
                maxHeap.offer(x);
            }else{
                minHeap.offer(x);
            }

            if(!maxHeap.isEmpty() && !minHeap.isEmpty()){
                // [1,2,7] [5,10] -> [1,2,5] [7,10]
                if(maxHeap.peek() > minHeap.peek()){
                    // swap
                    int temp = maxHeap.poll();
                    maxHeap.offer(minHeap.poll());
                    minHeap.offer(temp);
                }
            }
            
            sb.append(maxHeap.peek() + "\n");
        }

        bw.write(sb.toString());
        bw.flush();

        br.close();
        bw.close();

    }
}

# Main_2042_구간합구하기
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main_2042_구간합구하기 {
    static int N, M, K;
    static long[] input, tree;
    static int leafPointer;
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());

        input = new long[N];
        for(int i=0; i<N; i++) {
			input[i]= Long.parseLong(br.readLine());
		}

        // tree 만들기
        initTree();

        int a, b;
		for(int i=0; i<M+K; i++) {
			st = new StringTokenizer(br.readLine());
			a = Integer.parseInt(st.nextToken());
			b = Integer.parseInt(st.nextToken());
			
			if(a==1) { //1이면 update
                // b번째 수를 c로 바꾼다
				update(b, Long.parseLong(st.nextToken()));
			}else{ //2면 구간합 query
                bw.write(query(b, Integer.parseInt(st.nextToken())) + "\n");
			}
		}

        bw.flush();
        bw.close();
        br.close();
    }

    static long query(int left, int right){
    	// left, right 포인터를 tree배열에서 찾을 수 있는 leafNode의 인덱스로 바꿔준다.
        left += leafPointer - 1;
        right += leafPointer - 1;
        long result = 0L;

        // left, right 포인터가 교차될 때까지
        while(left <= right){
        	// left 포인터가 right child면 현재 값을 result에 더하고 left포인터를 오른쪽으로 하나 당긴다.
            if(left % 2 == 1){
                result += tree[left];
                left++;
            }
            // right 포인터가 left child면 현재 값을 result에 더하고 right포인터를 왼쪽으로 하나 당긴다.
            if(right % 2 == 0){
                result += tree[right];
                right--;
            }
            // 부모로 이동
            left /= 2;
            right /= 2;
        }

        return result;
    }

    //3. 조건에 따라 리프노드의 부모노드를 따라 루트노드까지 값을 업데이트 한다.
	// 구간합일 경우, 부모 = left child + right child
	// min/max heap일 경우, 부모 = min/max(left child, right child)
	// ex) tree[i] = tree[i*2] + tree[i*2+1]
    static void update(int index, long value){
    	//index로 들어온 값을 tree배열에서 찾을 수 있는 leafNode의 인덱스로 바꿔준다.
    	int treeIndex = leafPointer + index - 1 ;

    	//리프노드의 값을 바꾸고
        tree[treeIndex] = value;
        //부모노드로 간다
        treeIndex /= 2;

        //부모노드->루트노드까지 값 update
  		//구간합일 경우, 부모 = left child + right child
  		//min/max heap일 경우, 부모 = min/max(left child, right child)
        while(treeIndex > 0){
            // tree 올라가면서 sum 으로 채우기
            tree[treeIndex] = tree[treeIndex*2] + tree[(treeIndex*2)+1];
            treeIndex /= 2;
        }
    }

    static void initTree(){
        int leafCount = 1;

        //1. input 데이터가 N개인 경우, 리프노드의 수 K 구하기
  		//N <= 2^K 를 만족하는 최소값 K = leafCount
  		//ex) N = 9일 경우, K = leafCount = 16
        while(N > leafCount){
             leafCount *= 2;
//            leafCount <<= 1;
        }

        //2. 리프노드의 사이즈를 바탕으로 전체 인덱스 트리의 크기를 구한다.
  		//전체 인덱스 트리의 크기 = 2^(K+1)
        tree = new long[leafCount * 2];
        leafPointer = leafCount;

        for(int i=0; i<N; i++){
            tree[leafPointer + i] = input[i];
        }

        //3. 조건에 따라 리프노드의 부모노드를 따라 루트노드까지 값을 업데이트 한다.
  		// 구간합일 경우, 부모 = left child + right child
  		// min/max heap일 경우, 부모 = min/max(left child, right child)
  		// ex) tree[i] = tree[i*2] + tree[i*2+1]
        for(int i=leafPointer-1; i>0; i--){
            // tree 올라가면서 sum 으로 채우기
            tree[i] = tree[i*2] + tree[(i*2)+1];
        }
    }
}

# Main_2094_강수량
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main_2094_강수량 {
    static int N, M, X, Y;

    static class YearInfo{
        int year;
        int rain;
        public YearInfo(int year, int rain){
            this.year = year;
            this.rain = rain;
        }
    }

    static YearInfo[] yearArr;
    static int[] tree;
    static int leafPointer;

    static class IndexInfo{
        int index;
        int rain;
        public IndexInfo(int index, int rain){
            this.index = index;
            this.rain = rain;
        }
    }

    static Map<Integer, IndexInfo> indexMap = new HashMap<>();

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        N = Integer.parseInt(br.readLine());
        initTree();
        yearArr = new YearInfo[N];

        StringTokenizer st;
        int year, rain;
        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            year = Integer.parseInt(st.nextToken());
            rain = Integer.parseInt(st.nextToken());

            // y가 증가하는 순서대로 주어진다 = 정렬된 상태
            yearArr[i] = new YearInfo(year, rain);
            tree[leafPointer + i] = rain;
            indexMap.put(year, new IndexInfo(i, rain));
        }

        initMaxTree();

        M = Integer.parseInt(br.readLine());
        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            bw.append(question(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken())));
            bw.newLine();
        }

        bw.flush();
        bw.close();
        br.close();
    }

    static String question(int y, int x){
        String result;

        boolean containsY = indexMap.containsKey(y);
        boolean containsX = indexMap.containsKey(x);

        // Case #1 : Y, X 년 정보가 둘 다 없으면 -> maybe
        if(!containsY && !containsX){
            result = "maybe";
        }
        // Case #2 : X 년 정보만 있으면
        //  IF: (Y바로 이후 년도:pY) <= Z < X 범위의 Z의 max 값이 X보다 작으면 (Y년 rain 값 조작해서) = maybe
        //  ELSE: false
        else if(!containsY && containsX){
            int xTreeIndex = indexMap.get(x).index;

            // 1. Y 바로 이후의 값이 있는 년도 찾기
            // 1-1. Y의 upperbound = Y 보다 큰, 값이 있는 min year
            int pyTreeIndex = upperBoundYear(y);

            // 2. pY <= Z < X 사이 max 값 찾기
            int max = query(pyTreeIndex, xTreeIndex - 1);

            // 3. 결과 판단
            if(max >= indexMap.get(x).rain){
                result = "false";
            }else{
                result = "maybe";
            }
        }
        // Case #3 : Y 년 정보만 있으면
        //  IF: Y < Z  < (X바로 다음 년도:pX)의 max 값이 X보다 작으면 (X년 rain 값 조작해서) = maybe
        //  ELSE: false
        else if(containsY && !containsX){
            int yTreeIndex = indexMap.get(y).index;

            // 1. X 바로 다음의 값이 있는 년도 찾기
            // 1-1. X의 upperbound = X 보다 큰, 값이 있는 min year
            // 1-2. X의 upperbound - 1 해서 X바로 이전의 값이 있는 년도 구함
            int pxTreeIndex = upperBoundYear(x) - 1;

            // 2. Y < Z < pX 사이 max 값 찾기
            int max = query(yTreeIndex + 1, pxTreeIndex);

            // 3. 결과 판단
            if(max < indexMap.get(y).rain){
                result = "maybe";
            }else{
                result = "false";
            }
        }
        // Case #4 : X, Y 년 정보 둘 다 있으면(containsX && containsY)
        // IF: X ~ Y 년 사이가 전부 있으면 true 일 가능성(max값 쿼리해보고 만족안하면 false)
        // ELSE: maybe
        else{
            int yTreeIndex = indexMap.get(y).index;
            int xTreeIndex = indexMap.get(x).index;

            int max = query(yTreeIndex + 1, xTreeIndex - 1);
            if(
                max >= indexMap.get(x).rain ||
                indexMap.get(y).rain < indexMap.get(x).rain
            ){
                result = "false";
            }
            else if((y - x) == yTreeIndex - xTreeIndex){
                result = "true";
            }else{
                result = "maybe";
            }
        }

        return result;
    }

    static int query(int left, int right){
        // 범위 넘어가지 않도록
        left = Math.max(left, 0);
        right = Math.min(right, N-1);

        left += leafPointer;
        right += leafPointer;
        int result = 0;

        while(left <= right){
            if(left % 2 == 1){
                result = Math.max(result, tree[left]);
                left++;
            }

            if(right % 2 == 0){
                result = Math.max(result, tree[right]);
                right--;
            }

            left /= 2;
            right /= 2;
        }

        return result;
    }

    static void initMaxTree(){
        for(int i=leafPointer-1; i>0; i--){
            // tree 올라가면서 max rain 으로 채우기
            tree[i] = Math.max(tree[i*2], tree[(i*2)+1]);
        }
    }

    static void initTree(){
        int leafCount = 1;

        while(N > leafCount){
            // leafCount *= 2;
            leafCount <<= 1;
        }

        tree = new int[leafCount * 2];
        leafPointer = leafCount;
    }

    static int upperBoundYear(int target){
        int low = 0;
        int high = yearArr.length;
        int mid;

        while(low < high){
            mid = (low + high)/2;
            // 
            if(yearArr[mid].year > target){
                high = mid;
            }else{
                low = mid + 1;
            }
        }
        return high;
    }
}

# Main_2243_사탕상자
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main_2243_사탕상자 {
    static int N, A, B, C;
    static final int MAX_TASTE = 1000000;
    static int[] tree;
    static int leafPointer;
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        initTree();

        N = Integer.parseInt(br.readLine());
        
        StringTokenizer st;
        for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			A = Integer.parseInt(st.nextToken());
			if(A == 1) { // 1이면 사탕 꺼내기
				B = Integer.parseInt(st.nextToken());
				// 사탕 꺼내기, B번째
				bw.write(pickup() + "\n");
			}else { // 2면 사탕 넣기
				B = Integer.parseInt(st.nextToken());
				C = Integer.parseInt(st.nextToken());
				// B맛 C개
				insert(B, C);
			}
		}
        
        bw.flush();
        bw.close();
        br.close();
    }

    static int pickup(){
        // 시작 포인트 = 루트노드
        int i = 1;
        while(i < leafPointer){
            if(tree[i*2] >= B){
                // 좌측 서브트리로
                i *= 2;
            }else{
                // 우측 서브트리로
                B = B - tree[i*2];
                i = (i*2)+1;
            }
        }

        insert(i - leafPointer + 1, -1);
        return i - leafPointer + 1;
    }    

    static void insert(int index, int value){
        int treeIndex = leafPointer + index - 1 ;

        tree[treeIndex] += value;
        treeIndex /= 2;

        while(treeIndex > 0){
            // tree 올라가면서 sum 으로 채우기
            tree[treeIndex] = tree[treeIndex*2] + tree[(treeIndex*2)+1];
            treeIndex /= 2;
        }
    }

    static void initTree(){
        int leafCount = 1;

        while(MAX_TASTE > leafCount){
            // leafCount *= 2;
            leafCount <<= 1;
        }

        tree = new int[leafCount * 2];
        leafPointer = leafCount;
    }
}

# Main_2725_보이는점의개수
package Chap3_Number_Theory;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Main_2725_보이는점의개수 {
    
    static final int MAX = 1000;
    static int[] count = new int[MAX+1];

    static int T;
    static int N;
    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        memo();

        T = Integer.parseInt(br.readLine());
        for(int tc=1; tc<=T; tc++) {
            N = Integer.parseInt(br.readLine());
            
            System.out.println(count[N]);
        }
        br.close();
        bw.close();
    }

    static int gcd(int a, int b){
		if(b==0) return a;
		return gcd(b, a%b);
    }
    
    static void memo(){
        count[1] = 3;
        for(int i=2; i<count.length; i++){
            int addCount = 0;
            
            // j는 가로세로의 길이 일 때(N까지 달려가는)
            for(int j=i; j>0; j--){
                if(i==j) continue;

                // (j, i) -> (x, y) -> x와 y가 서로소여야지만 보인다
                /*
                // 윗변에 추가되는 관측가능한 점
                if(gcd(j, i) == 1){
                    addCount++;
                }
                // 오른쪽변에 추가되는 관측가능한 점
                if(gcd(i, j) == 1){
                    addCount++;
                }
                */

                // 윗변 + 오른쪽변 합치면
                if(gcd(i, j) == 1){
                    addCount+=2;
                }
            }

            count[i] = count[i-1] + addCount;
        }
    }
}

# Main_3955_캔디분배
package Chap3_Number_Theory;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main_3955_캔디분배 {
    static int T, K, C;
    static final long MAX = 1000000000L;
    public static void main(String args[]) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        T = Integer.parseInt(br.readLine());
        long[] result;
        long x, y;
        for(int tc=1; tc<=T; tc++){
            st = new StringTokenizer(br.readLine());
            K = Integer.parseInt(st.nextToken());
            C = Integer.parseInt(st.nextToken());
            // Cy = Kx + 1
            // Cy + K(-x) = 1

            // K와 C가 서로소여야 만족하는 정수해가 존재한다
            if(gcd(K, C) != 1){
                bw.write("IMPOSSIBLE");
                bw.newLine();
                continue;
            }
            result = eec(K, C);

            // Cy + K(-x) = 1
            // 1명당 Kx+1 개의 사탕 (-x가 양수일때까지 = x가 음수일때까지 -C)
            x = result[0];
            // 사장 y 봉지 (y가 양수일때까지 +K)
            y = result[1];

            // bw.write(tc + ":" + x + " " + y + "\n");
            // Cy + K(-x)
            // = (Cy + KC) + (K(-x) - KC)
            // = C(y + K) + K(-x - C)
            while(y <= 0 || x >= 0){
                y+=K;
                x-=C;
            }

            if(y > MAX){
                bw.write("IMPOSSIBLE");
                bw.newLine();
            }else{
                bw.write(y + "\n");
            }
        }
        bw.flush();
        bw.close();
        br.close();
    }

    static long[] eec(long a, long b){
        // K(-x) + Cy = 1
        long s2, t2, r2;
        long s1, t1, r1;
        long s = 0, t = 0, r = 0, q = 0;

        s2 = 1; t2 = 0; r2 = a;
        s1 = 0; t1 = 1; r1 = b;

        /* System.out.println("s  t  r  q");
        System.out.println("==========");
        System.out.println(s2 + " " + t2 + " " + r2);
        System.out.println(s1 + " " + t1 + " " + r1); */

        while(r1 != 0){
            q = r2 / r1;
            r = r2 % r1;
            s = s2 - (q*s1);
            t = t2 - (q*t1);

            // System.out.println(s + " " + t + " " + r + " " + q);

            s2 = s1; t2 = t1; r2 = r1;
            s1 = s;  t1 = t;  r1 = r;
        }

        return new long[]{s2, t2};
    }

    static long gcd(long a, long b) {
        if(b==0) return a;
        return gcd(b, a%b);
    }
}

# Main_14476_최대공약수하나빼기
package Chap3_Number_Theory;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main_14476_최대공약수하나빼기 {
    static int N, K, MAX_GCD;
    static int[] input;
    static int[] ltor;
    static int[] rtol;

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        input = new int[N];
        ltor = new int[N];
        rtol = new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i=0; i<N; i++){
            input[i] = Integer.parseInt(st.nextToken());
            if(i==0){
                ltor[i] = input[i];
            }else{
                // L -> R 방향으로 gcd를 채움
                ltor[i] = gcd(ltor[i-1], input[i]);
            }
        }
        br.close();

        for(int i=N-1; i>=0; i--){
            if(i==N-1){
                rtol[i] = input[i];
            }else{
                // R -> L 방향으로 gcd를 채움
                rtol[i] = gcd(rtol[i+1], input[i]);
            }
        }

        K = 0;
        MAX_GCD = 0;

        int gcd = 0;
        for(int i=0; i<N; i++){
            if(i==0){
                gcd = rtol[1];
            }else if(i==N-1){
                gcd = ltor[N-2];
            }else{
                gcd = gcd(ltor[i-1], rtol[i+1]);
            }

            // 답(MAX_GCD, 그때 뺀 수 K) 갱신
            // 뺀 수(K = input[i]) 일때, 나머지 수의 gcd가 K의 약수가 되면 안된다 -> input[i]%gcd != 0
            if(MAX_GCD < gcd && input[i]%gcd != 0){
                K = input[i];
                MAX_GCD = gcd;
            }
        }

        if(MAX_GCD == 0){
            System.out.println(-1);
        }else{
            System.out.println(MAX_GCD + " " + K);
        }

    }

    static int gcd(int a, int b){
        if(b==0) return a;
        return gcd(b, a%b);
    }
}

