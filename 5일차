# 1.줄세우기_LineUp
package Chap5_Graph_1th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class LineUp {

	public static int[] sDegree;
	public static ArrayList<Integer>[] adj;
	public static int N, M;	//학생들의 번호N, 비교건수 M
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		sDegree = new int[N + 1];
		adj = new ArrayList[N + 1];
		for(int i = 1; i <= N; i++)
			adj[i] = new ArrayList<>();
		
		for(int i = 1; i <= M; i++) {
			st = new StringTokenizer(br.readLine());
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			adj[A].add(B);
			sDegree[B]++;			
		}
		
		Queue<Integer> que = new LinkedList<>();		
		for(int i = 1; i <= N; i++) {
			if(sDegree[i] == 0) {
				que.add(i);
			}			
		}
		
		while(!que.isEmpty()) {
			int now = que.poll();
			bw.write(now + " ");
			
			for(Integer next : adj[now]) {
				sDegree[next]--;
				if(sDegree[next] == 0) {
					que.add(next);					
				}
			}
		}
		bw.flush();
		bw.close();
		br.close();
	}

}

# 2.게임개발_DevelopGame
package Chap5_Graph_1th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class DevelopGame {

	public static int[] bDegree;
	public static int[] bTime;
	public static int[] bResult;
	public static ArrayList<Integer>[] adj;
	public static int N;
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		N = Integer.parseInt(br.readLine());
		bDegree = new int[N + 1];
		bTime = new int[N + 1];
		bResult = new int[N + 1];
		adj = new ArrayList[N + 1];
		for(int i = 1; i <= N; i++)
			adj[i] = new ArrayList<>();
		
		for(int i = 1; i <= N; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int time = Integer.parseInt(st.nextToken());
			bTime[i] = time;
			while(st.hasMoreTokens()) {
				int cBuilding = Integer.parseInt(st.nextToken());
				if(cBuilding == -1)	break;
				adj[cBuilding].add(i);
				bDegree[i]++;
			}
		}
		
		Queue<Integer> que = new LinkedList<>();		
		for(int i = 1; i <= N; i++) {
			if(bDegree[i] == 0) {
				que.add(i);
				bResult[i] = bTime[i];
			}
		}
		
		while(!que.isEmpty()) {
			int now = que.poll();
			
			for(Integer next : adj[now]) {
				bDegree[next]--;
				bResult[next]= Math.max(bResult[next], bResult[now]+bTime[next]);
				if(bDegree[next] == 0)
					que.add(next);			
				
			}
		}
		
		for(int i = 1; i <= N; i++) {
			bw.write(bResult[i] + "\n");
		}
		

		bw.flush();
		bw.close();
		br.close();
	}

}

# 3.set
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static int[] parents;
	public static int n, m;		//n 원소, m 연산의 개수
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		
		parents = new int[n + 1];
		for(int i = 1; i <= n; i++)
			parents[i] = i;
		
		for(int i = 1; i <= m; i++) {			
			st = new StringTokenizer(br.readLine());
			int cmd = Integer.parseInt(st.nextToken());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			if(cmd == 0)
				union(a, b);
			else {
				if(find(a) == find(b))
					bw.write("YES\n");
				else
					bw.write("NO\n");
			}
		}		
		bw.flush();
		bw.close();
		br.close();
	}
	public static void union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		parents[bRoot] = aRoot;
	}
	
	public static int find(int a) {
		if(parents[a] == a)
			return a;
		
		return parents[a] = find(parents[a]);
	}	

}

# 4.교수님은 기다리지 않는다
import java.util.*;
import java.io.*;

public class Main {

	static int[] sample, weight;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		while (true) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());  		// 샘플의 종류의 개수
			int M = Integer.parseInt(st.nextToken());		// 실험실에서 한 일의 수

			if(N == 0 && M == 0) break;
			
			sample = new int[N + 1];
			weight = new int[N + 1];
			for (int i = 1; i <= N; ++i)
				sample[i] = i;

			for (int i = 1; i <= M; ++i) {
				st = new StringTokenizer(br.readLine());
				String cmd = st.nextToken();
				if (cmd.equals("!")) {
					int a = Integer.parseInt(st.nextToken());
					int b = Integer.parseInt(st.nextToken());
					int w = Integer.parseInt(st.nextToken());

					union(a, b, w);
				} else if (cmd.equals("?")) {
					int a = Integer.parseInt(st.nextToken());
					int b = Integer.parseInt(st.nextToken());

					if (find(a) != find(b))
						System.out.println("UNKNOWN");
					else
						System.out.println(weight[b] - weight[a]);
				}
			}
		}
	}

	private static int find(int a) {
		if (sample[a] == a)
			return a;
		else {
			int prv = find(sample[a]);
			weight[a] += weight[sample[a]];
			return sample[a] = prv;
		}
	}

	private static void union(int a, int b, int w) {
		int aRoot = find(a);
		int bRoot = find(b);
		if (aRoot == bRoot)
			return;
		sample[bRoot] = aRoot;
		weight[bRoot] += (w - weight[b] + weight[a]);
	}
}
