# 1.ShortestPath
package Chap5_Graph_2th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class ShortestPath {
	public static class Node implements Comparable<Node> {
		int to;
		int cost;
		Node(int to, int cost){
			this.to = to;
			this.cost = cost;
		}
		@Override
		public int compareTo(Node arg0) {
			return this.cost - arg0.cost;
		}
	}
	
	public static int V, E, sNo;
	public static int[] DP;
	public static ArrayList<Node>[] adj;	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		V = Integer.parseInt(st.nextToken());
		E= Integer.parseInt(st.nextToken());
		sNo = Integer.parseInt(br.readLine());
		DP = new int[V + 1];
		adj = new ArrayList[V + 1];
		for(int i = 1; i <= V; i++) {
			DP[i] = Integer.MAX_VALUE;
			adj[i] = new ArrayList<>();			
		}
		
		for(int i = 1; i <= E; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());	//출발지
			int v = Integer.parseInt(st.nextToken());	//도착지
			int w = Integer.parseInt(st.nextToken());	//가중치
			adj[u].add(new Node(v, w));
		}
		dijkstra(sNo);
		
		for(int i = 1; i <= V; i++) {
			if(DP[i] == Integer.MAX_VALUE)
				bw.write("INF\n");
			else
				bw.write(DP[i] + "\n");
		}
		bw.flush();
		bw.close();
		
	}
	public static void dijkstra(int sNo) {
		PriorityQueue<Node> pq = new PriorityQueue<>();
		DP[sNo] = 0;
		pq.add(new Node(sNo, 0));
		
		boolean[] visited = new boolean[V + 1];
		Arrays.fill(visited, false);
		while(!pq.isEmpty()) {
			Node a = pq.poll();
			int now = a.to;
			int nowCost = a.cost;
			
			if(nowCost > DP[now])	continue;
			
			/*if(visited[now] == true)	continue;
			visited[now] = false;*/
			
			
			for(Node e : adj[now]) {
				int next = e.to;
				int nextCost = e.cost + DP[now];
				if(nextCost < DP[next]) {
					DP[next] = nextCost;
					pq.add(new Node(next, nextCost));
				}
			}	
		}
	}

}

/*
 * <우선순위 큐>
 * 
 * 일반적인 큐의 구조를 가짐 = First In First Out, FIFO
 * 단, 데이터가 나갈때는 들어온 순서대로 나가지 않고, 우선순위를 먼저 결정하고
 * 그 우선순위가 높은 데이터가 먼저 나가는 자료구조임
 * 
 * 우선순위 큐를 사용하기 위해,
 * 
 * 우선순위 큐에 저장할 객체는 필수적으로 Comparable Interfce를 구현해야함.
 * 
 * Compareable Interface를 구현하면 compareTo method를 override하게되고,
 * 해당 객체에서 처리할 우선순위 조건을 리턴해주면,
 * PriorityQueue가 알아서 우선순위가 높은 객체를 추출해줌.
 * 
 *  PriorityQueue는 Heap를 이용해 구현함
 *  
 *  데이터를 삽입할 때, 우선순위를 기준으로 최대힙 혹은 최소힙을 구성
 *  데이터를 꺼낼 때, 
 *  
 *  	루트노드를 얻어낸 뒤, 루트 노드를 삭제할 때는 빈 루트 노드 위치에 
 *      맨 마지막 노드를 삽입한 후 아래로 내려가면서 적절한 자리를 다시 찾아
 *      옮겨준다. 
 *  
 *  최대 값이 우선순위인 큐 - 최대 힙
 *  최소 값이 우선순위인 큐 - 최소 힙
 * 
 * 특징
 * - 높은 우선순위의 요소를 먼저 꺼내 처리하는 구조임 
 * - (우선순위 큐에 들어가는 원소는 비교 가능한 기준이 있어야함)
 * - 내부 요소는 힙으로 구성되어 이진트리 구조로 이루어져 있음
 * - 내부구조가 힙으로 구성되어 있어서 시간 복잡도는 O(NlogN)임
 * - 우선순위를 중요시해야 하는 상황에서 주로 쓰임
 * 
 * https://velog.io/@gillog/Java-Priority-Queue%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84-%ED%81%90
 * 
 * 
 * 
 * 
 * */

# 4.Floyd
package Chap5_Graph_2th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Floyd {
	public static long[][] Maps;
	public static int n, m;	//도시, 버스
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		n = Integer.parseInt(br.readLine());
		m = Integer.parseInt(br.readLine());
		
		Maps = new long[n + 1][n + 1];
		for(int i = 1; i <= n; i++)
			//Arrays.fill(Maps[i], 0);
			Arrays.fill(Maps[i], Integer.MAX_VALUE);						
		
		for(int i = 1; i <= m; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());	//시작도시
			int b = Integer.parseInt(st.nextToken());	//도착도시
			int c = Integer.parseInt(st.nextToken());	//비용
					
			Maps[a][b] = Math.min(Maps[a][b], c);
		}
		
		for(int k = 1; k <= n; k++) {
			for(int i = 1; i <= n; i++) {
				if(i == k)	continue;
				for(int j = 1; j <= n; j++) {
					if(k == j || i == j )	continue;
					if(Maps[i][j] > Maps[i][k] + Maps[k][j])
						Maps[i][j] = Maps[i][k] + Maps[k][j];
				}
			}
		}
		
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= n; j++) {
				if(Maps[i][j] == Integer.MAX_VALUE)
					Maps[i][j] = 0;
			}				
		}
		
		
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= n; j++) {
				bw.write(Maps[i][j] + " ");
			}
			bw.write("\n");
		}
		bw.flush();
		bw.close();
	}
}

# KthShortestPath
package Chap5_Graph_2th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class KthShortestPath {
	public static class Node implements Comparable<Node> {
		int to;
		int cost;
		Node(int to, int cost){
			this.to = to;
			this.cost = cost;
		}
		@Override
		public int compareTo(Node arg0) {
			return this.cost - arg0.cost;
		}
	}
	
	public static int n, m, k;
	//public static int[] DP;
	public static ArrayList<Node>[] adj;
	public static PriorityQueue<Integer>[] distPQ;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());	//k번째 최단경로기준
		//DP = new int[V + 1];
		adj = new ArrayList[n + 1];
		distPQ = new PriorityQueue[n + 1];
		for(int i = 1; i <= n; i++) {
			//DP[i] = Integer.MAX_VALUE;
			adj[i] = new ArrayList<>();
			distPQ[i] = new PriorityQueue<>(Collections.reverseOrder());
		}
		
		for(int i = 1; i <= m; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());	//출발지
			int b = Integer.parseInt(st.nextToken());	//도착지
			int c = Integer.parseInt(st.nextToken());	//가중치
			adj[a].add(new Node(b, c));
		}
		dijkstra(1);		
		
		for(int i = 1; i <= n; i++) {
			if(distPQ[i].size() == k)
				bw.write(distPQ[i].peek() + "\n");
			else
				bw.write("-1\n");			
			
		}		
		
		bw.flush();
		bw.close();
		
	}
	public static void dijkstra(int sNo) {
        distPQ[sNo].add(0);
		PriorityQueue<Node> pq = new PriorityQueue<>();
		//DP[sNo] = 0;
		pq.add(new Node(sNo, 0));		
		while(!pq.isEmpty()) {
			Node a = pq.poll();
			int now = a.to;
			int nowCost = a.cost;			
			//if(nowCost > DP[now])	continue;			
			for(Node e : adj[now]) {
				int next = e.to;
				int nextCost = e.cost + nowCost;
				if(distPQ[next].size() < k) {
					distPQ[next].add(nextCost);
					pq.add(new Node(next, nextCost));
				}else if(nextCost < distPQ[next].peek()) {
					distPQ[next].poll();
					distPQ[next].add(nextCost);
					pq.add(new Node(next, nextCost));
				}			
			}	
		}
	}

}

# TimeMachine
package Chap5_Graph_2th;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class TimeMachine {
	public static class Node {
		int from;
		int to;
		int cost;

		Node(int from, int to, int cost) {
			this.from = from;
			this.to = to;
			this.cost = cost;
		}
	}

	public static int N, M; // N : 도시의 개수, M : 버스의 개수
	public static ArrayList<Node> adj;
	public static long[] DP;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		adj = new ArrayList<>();
		DP = new long[N + 1];
		Arrays.fill(DP, Integer.MAX_VALUE);

		for (int i = 1; i <= M; i++) {
			st = new StringTokenizer(br.readLine());
			int A = Integer.parseInt(st.nextToken()); // 시작도시
			int B = Integer.parseInt(st.nextToken()); // 도착도시
			int C = Integer.parseInt(st.nextToken()); // 시간
			adj.add(new Node(A, B, C));
		}
		boolean checked = false;
		DP[1] = 0;
		for (int i = 1; i <= N; i++) {
			for (Node e : adj) {
				int start = e.from;
				int end = e.to;
				int time = e.cost;
				if (DP[start] != Integer.MAX_VALUE && DP[start] + time < DP[end]) {
					DP[end] = DP[start] + time;

					if (i == N) // 음수 싸이클 있는것
						checked = true;
				}
			}
		}

		if (checked)
			bw.write("-1\n");
		else {
			for (int i = 2; i <= N; i++) {
				if (DP[i] == Integer.MAX_VALUE)
					bw.write("-1\n");
				else
					bw.write(DP[i] + "\n");
			}

			bw.flush();
			bw.close();
		}
	}
}
