# Main_1202_보석도둑
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main_1202_보석도둑 {
    
    static int N, K, M, V;

    static class Jewel{
    // static class Jewel implements Comparable<Jewel>{
        int m, v;
        public Jewel(int m, int v){
            this.m = m;
            this.v = v;
        }
        /* @Override
		public int compareTo(Jewel o) {
            if(this.m == o.m){
                return Integer.compare(o.v, this.v);
            }
            return Integer.compare(this.m, o.m);
        } */
    }

    static Jewel[] jewelArr;
    static int[] bagArr;
    static long ANSWER;

    public static void main(String args[]) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        // BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N =Integer.parseInt(st.nextToken());
        K =Integer.parseInt(st.nextToken());

        jewelArr = new Jewel[N];
        bagArr = new int[K];

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            M =Integer.parseInt(st.nextToken());
            V =Integer.parseInt(st.nextToken());
            jewelArr[i] = new Jewel(M, V);
        }

        for(int i=0; i<K; i++){
            bagArr[i] = Integer.parseInt(br.readLine());
        }

        br.close();

        // 보석 무게(M) 오름차순으로 정렬
        Arrays.sort(jewelArr, new Comparator<Jewel>(){
            @Override
            public int compare(Jewel o1, Jewel o2) {
                return Integer.compare(o1.m, o2.m);
            }
        });
        // 가방에 담을 수 있는 무게(C) 오름차순으로 정렬
        Arrays.sort(bagArr);
        
        // pq에는 전부 가방에 담을 수 있는 보석만 존재하므로 가격(V)에 대해 내림차순으로 정렬
        PriorityQueue<Jewel> pq = new PriorityQueue<>(new Comparator<Jewel>(){
            @Override
            public int compare(Jewel o1, Jewel o2) {
                return Integer.compare(o2.v, o1.v);
            }
        });
        int jewelArrIndex = 0;
        for(int i=0; i<K; i++){
            // i번째 가방에 넣을 수 있는 무게의 보석들을 pq에 추가한다.
            while (jewelArrIndex < N && jewelArr[jewelArrIndex].m <= bagArr[i]) {
                pq.add(jewelArr[jewelArrIndex++]);
            }
            if(!pq.isEmpty()){
                // 보석 가격의 합
                ANSWER += pq.poll().v;
            }
        }

        System.out.println(ANSWER);
    }

}

# Main_2042_구간합구하기
//package Chap2_Data_Structure;
//
//import java.io.BufferedReader;
//import java.io.BufferedWriter;
//import java.io.InputStreamReader;
//import java.io.OutputStreamWriter;
//import java.util.StringTokenizer;
//
//public class Main_2042_구간합구하기 {
//    static int N, M, K;
//    static long[] input, tree;
//    static int leafPointer;
//    public static void main(String args[]) throws Exception {
//        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
//        StringTokenizer st;
//
//        st = new StringTokenizer(br.readLine());
//        N = Integer.parseInt(st.nextToken());
//		M = Integer.parseInt(st.nextToken());
//		K = Integer.parseInt(st.nextToken());
//
//        input = new long[N];
//        for(int i=0; i<N; i++) {
//			input[i]= Long.parseLong(br.readLine());
//		}
//
//        // tree 만들기
//        initTree();
//
//        int a, b;
//		for(int i=0; i<M+K; i++) {
//			st = new StringTokenizer(br.readLine());
//			a = Integer.parseInt(st.nextToken());
//			b = Integer.parseInt(st.nextToken());
//			
//			if(a==1) { //1이면 update
//                // b번째 수를 c로 바꾼다
//				update(b, Long.parseLong(st.nextToken()));
//			}else{ //2면 구간합 query
//                bw.write(query(b, Integer.parseInt(st.nextToken())) + "\n");
//			}
//		}
//
//        bw.flush();
//        bw.close();
//        br.close();
//    }
//
//    static long query(int left, int right){
//    	// left, right 포인터를 tree배열에서 찾을 수 있는 leafNode의 인덱스로 바꿔준다.
//        left += leafPointer - 1;
//        right += leafPointer - 1;
//        long result = 0L;
//
//        // left, right 포인터가 교차될 때까지
//        while(left <= right){
//        	// left 포인터가 right child면 현재 값을 result에 더하고 left포인터를 오른쪽으로 하나 당긴다.
//            if(left % 2 == 1){
//                result += tree[left];
//                left++;
//            }
//            // right 포인터가 left child면 현재 값을 result에 더하고 right포인터를 왼쪽으로 하나 당긴다.
//            if(right % 2 == 0){
//                result += tree[right];
//                right--;
//            }
//            // 부모로 이동
//            left /= 2;
//            right /= 2;
//        }
//
//        return result;
//    }
//
//    //3. 조건에 따라 리프노드의 부모노드를 따라 루트노드까지 값을 업데이트 한다.
//	// 구간합일 경우, 부모 = left child + right child
//	// min/max heap일 경우, 부모 = min/max(left child, right child)
//	// ex) tree[i] = tree[i*2] + tree[i*2+1]
//    static void update(int index, long value){
//    	//index로 들어온 값을 tree배열에서 찾을 수 있는 leafNode의 인덱스로 바꿔준다.
//    	int treeIndex = leafPointer + index - 1 ;
//
//    	//리프노드의 값을 바꾸고
//        tree[treeIndex] = value;
//        //부모노드로 간다
//        treeIndex /= 2;
//
//        //부모노드->루트노드까지 값 update
//  		//구간합일 경우, 부모 = left child + right child
//  		//min/max heap일 경우, 부모 = min/max(left child, right child)
//        while(treeIndex > 0){
//            // tree 올라가면서 sum 으로 채우기
//            tree[treeIndex] = tree[treeIndex*2] + tree[(treeIndex*2)+1];
//            treeIndex /= 2;
//        }
//    }
//
//    static void initTree(){
//        int leafCount = 1;
//
//        //1. input 데이터가 N개인 경우, 리프노드의 수 K 구하기
//  		//N <= 2^K 를 만족하는 최소값 K = leafCount
//  		//ex) N = 9일 경우, K = leafCount = 16
//        while(N > leafCount){
//             leafCount *= 2;
////            leafCount <<= 1;
//        }
//
//        //2. 리프노드의 사이즈를 바탕으로 전체 인덱스 트리의 크기를 구한다.
//  		//전체 인덱스 트리의 크기 = 2^(K+1)
//        tree = new long[leafCount * 2];
//        leafPointer = leafCount;
//
//        for(int i=0; i<N; i++){
//            tree[leafPointer + i] = input[i];
//        }
//
//        //3. 조건에 따라 리프노드의 부모노드를 따라 루트노드까지 값을 업데이트 한다.
//  		// 구간합일 경우, 부모 = left child + right child
//  		// min/max heap일 경우, 부모 = min/max(left child, right child)
//  		// ex) tree[i] = tree[i*2] + tree[i*2+1]
//        for(int i=leafPointer-1; i>0; i--){
//            // tree 올라가면서 sum 으로 채우기
//            tree[i] = tree[i*2] + tree[(i*2)+1];
//        }
//    }
//}

# Main_2143_두배열의합
package Chap1_Algorithm_Basics;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main_2143_두배열의합 {
    static int T, N, M;
    static int[] A, B;
    static long ANSWER = 0L;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        T = Integer.parseInt(br.readLine()); // 목표값

        N = Integer.parseInt(br.readLine());
        A = new int[N];
        st = new StringTokenizer(br.readLine());
        for(int n=0; n<N; n++){
            A[n] = Integer.parseInt(st.nextToken());
        }

        M = Integer.parseInt(br.readLine());
        B = new int[M];
        st = new StringTokenizer(br.readLine());
        for(int m=0; m<M; m++){
            B[m] = Integer.parseInt(st.nextToken());
        }

        br.close();

        // Way #1. two pointers
        twoPointers();

        // Way #2. binary search
        // upper_bound : x보다 큰 값이 나타나는 첫번째 인덱스
        // lower_bound : x값이 나타나는 첫번째 인덱스
        // upper_bound - lower_bound = target 값의 갯수
//        binarySearch();

        // Way #3. hash
//        hashway();


        bw.write(ANSWER + "\n");
        bw.close();
    }

    static void twoPointers(){
        ArrayList<Integer> sumListA = new ArrayList<>();
        ArrayList<Integer> sumListB = new ArrayList<>();

        // A 부배열
        for(int i=0; i<N; i++){
            int sum = 0;
            for(int j=i; j<N; j++){
                sum += A[j];
                sumListA.add(sum);
            }
        }

        // B 부배열
        for(int i=0; i<M; i++){
        	int sum = 0;
            for(int j=i; j<M; j++){
                sum += B[j];
                sumListB.add(sum);
            }
        }

        // sort
        Collections.sort(sumListA);
        Collections.sort(sumListB);

        int aListSize = sumListA.size();
        int bListSize = sumListB.size();

        int left = 0;
        int right = bListSize-1;
        while(left < aListSize && right >= 0){
            int tempSum = sumListA.get(left) + sumListB.get(right);

            // #1. 목표값(T) 보다 부배열의 합이 클때 -> right 포인터를 감소
            if(tempSum > T){
                right--;
            }
            // #2. 목표값(T) 보다 부배열의 합이 작을때 -> left 포인터를 증가
            else if(tempSum < T){
                left++;
            }
            // #3. 목표값(T)과 같으면 -> A, B 부배열에서 같은 숫자 갯수 세기 + 포인터 옮기기
            else{
            	int a = sumListA.get(left);
            	int b = sumListB.get(right);
            	long countA = 0, countB = 0;

                while (left < aListSize && sumListA.get(left) == a) {
					countA++;
					left++;
				}
				while (right >= 0 && sumListB.get(right) == b) {
					countB++;
					right--;
				}
                ANSWER += countA * countB;
            }

        } // end of while

    } // end of two pointers

    static void binarySearch(){
        // 배열의 크기는 등차수열의 합 만큼의 크기
        // 1,2,3 => 1, 2, 3, 12, 13, 23, 123
        int[] sumListA = new int[N*(N+1)/2];
        int[] sumListB = new int[M*(M+1)/2];
        
        // A 부배열
        int index = 0;
        for(int i=0; i<N; i++){
        	int sum = 0;
            for(int j=i; j<N; j++){
                sum += A[j];
                sumListA[index++] = sum;
            }
        }
        
        // B 부배열
        index = 0;
        for(int i=0; i<M; i++){
        	int sum = 0;
            for(int j=i; j<M; j++){
                sum += B[j];
                sumListB[index++] = sum;
            }
        }

        // sort
        Arrays.sort(sumListA);
        Arrays.sort(sumListB);

        for(int i=0; i<sumListA.length; ) {
        	int aValue = sumListA[i];
        	long aCount = upperBound(sumListA, aValue) - lowerBound(sumListA, aValue);
    		long bCount = upperBound(sumListB, T-aValue)- lowerBound(sumListB, T-aValue);
			ANSWER += aCount * bCount;
			i += aCount;
		}
    }

    /* upper_bound : x보다 큰 값이 나타나는 첫번째 인덱스 */
    static int upperBound(int[] arr, int x){
        int left = 0;
        int right = arr.length;
        int mid;

        while(left < right){
            mid = (left + right)/2;
            if(arr[mid] > x){
                right = mid;
            }else{
                // 버리는 부분
                left = mid + 1;
            }
        }
        return right;
    }

    /* lower_bound : x값이 나타나는 첫번째 인덱스 */
    static int lowerBound(int[] arr, int x){
        int left = 0;
        int right = arr.length;
        int mid;

        while(left < right){
            mid = (left + right)/2;
            if(arr[mid] >= x){
                right = mid;
            }else{
                // 버리는 부분
                left = mid + 1;
            }
        }
        return right;
    }


    static void hashway(){
        HashMap<Integer, Integer> mapA = new HashMap<>();
        // A 부배열
        for(int i=0; i<N; i++){
        	int sum = 0;
            for(int j=i; j<N; j++){
                sum += A[j];
                if(mapA.containsKey(sum)){
                    int count = mapA.get(sum) + 1;
                    mapA.put(sum, count);
                }else{
                    mapA.put(sum, 1);
                }
            }
        }

        // B 부배열
        for(int i=0; i<M; i++){
            int sum = 0;
            for(int j=i; j<M; j++){
                sum += B[j];
                if(mapA.containsKey(T-sum)){
                    ANSWER += mapA.get(T-sum);
                }
            }
        }
    }
    
}


# Main_2805_나무자르기
package Chap1_Algorithm_Basics;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main_2805_나무자르기 {
    static int N, M;
    static int[] treeArr;
    static int ANSWER = 0;

    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        treeArr = new int[N];
        st = new StringTokenizer(br.readLine());
        int maxHeight = 0;
        for(int i=0; i<N; i++){
            treeArr[i] = Integer.parseInt(st.nextToken());
            maxHeight = Math.max(maxHeight, treeArr[i]);
        }
        br.close();

        binarySearch(maxHeight);

        System.out.println(ANSWER);
    }

    static void binarySearch(int maxHeight){
        int min = 0;
        int max = maxHeight;
        int mid;

        while(min < max) {
            mid = (min + max)/2;
            if(calcSum(mid) >= M){
                // #1. mid 값은 만족 에 포함
                // bar 를 높인다
                min = mid + 1;
            }
            else{
                // #2. mid 값은 만족 에 포함되지 않음
                // bar 를 낮춘다
                max = mid;
            }
        }

        // 마지막 만족값을 찾고 - #1 수행 - 그 다음 루프에 min == max라서 while 탈출 이므로
        // 답은 마지막 min - 1 값 (다시 말하자면 upperbound를 구한 것이다.)
        ANSWER = min - 1;
    }

    static long calcSum(int cuttingHeight){
        long sum = 0L;
        for(int treeHeight : treeArr){
            int gap = treeHeight - cuttingHeight;
            if(gap > 0){
                sum += gap;
            }
        }
        return sum;
    }
}

# Main_2842_집배원한상덕
package Chap1_Algorithm_Basics;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.TreeSet;

public class Main_2842_집배원한상덕 {
    static int N;

    static class Point{
        int x, y;
        char type;
        int altitude;

        public Point(int x, int y, char type){
            this.x = x;
            this.y = y;
            this.type = type;
            this.altitude = 0;
        }
    }
    static Point[][] map;

    // P(우체국) = bfs 시작좌표
    static int px;
    static int py;
    // K(집) 갯수
    static int kCount = 0;

    // sort가 가능한 treeSet
    static TreeSet<Integer> altitudeSet =  new TreeSet<>();
    static Integer[] altitudeArr;

    // 이동가능한 곳(상하좌우) (0,1), (-1,0), (1,0), (0,-1)
    // 이동가능한 곳(대각) (-1,1), (-1,-1), (1,1), (1,-1)
    static int[] dx = {0, -1, 1, 0, -1, -1, 1, 1};
    static int[] dy = {1, 0, 0, -1, 1, -1, 1, -1};

    // min = 1, max = 1000000
    static int ANSWER = 1000000 - 1;

    static int MIN = Integer.MAX_VALUE, MAX = Integer.MIN_VALUE;
    static int MIN_INDEX, MAX_INDEX;


    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        N = Integer.parseInt(br.readLine());
        map = new Point[N][N];

        String row;
        for(int i=0; i<N; i++){
            row = br.readLine();
            for(int j=0; j<N; j++){
                map[i][j] = new Point(i, j, row.charAt(j));
                if(map[i][j].type == 'P'){
                    px = i;
                    py = j;
                }else if(map[i][j].type == 'K'){
                    kCount++;
                }
            }
        }

        for(int i=0; i<N; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j=0; j<N; j++){
                map[i][j].altitude = Integer.parseInt(st.nextToken());
                altitudeSet.add(map[i][j].altitude);
                if(map[i][j].type == 'P' || map[i][j].type == 'K'){
                    // P와 K는 방문할 수 있어야만 한다.
                    MIN = Math.min(MIN, map[i][j].altitude);
                    MAX = Math.max(MAX, map[i][j].altitude);
                }
            }
        }

        br.close();

        // alt 구간에서 bfs로 모든 K가 방문가능하면 만족
        // new Integer[0] : 배열 크기 자동지정
        altitudeArr = altitudeSet.toArray(new Integer[0]);
        MIN_INDEX = Arrays.binarySearch(altitudeArr, MIN);
        MAX_INDEX = Arrays.binarySearch(altitudeArr, MAX);

        twoPointers();

        System.out.println(ANSWER);
    }
    
    static void twoPointers(){
        int left = 0;
        int right = MAX_INDEX;  // P와 K는 방문할 수 있어야만 한다.

        while(left <= right && right < altitudeArr.length
        && left <= MIN_INDEX    // P와 K는 방문할 수 있어야만 한다.
        // && right <= MAX_INDEX
        ){
            if(isPossible(altitudeArr[left], altitudeArr[right])){
                ANSWER = Math.min(ANSWER, altitudeArr[right] - altitudeArr[left]);
                left++;
            }else{
                right++;
            }
        }
    }

    static boolean isPossible(int altLow, int altHigh){
        Queue<Point> q = new ArrayDeque<>();
        q.add(map[px][py]);
        boolean[][] visited = new boolean[N][N];
        visited[px][py] = true;
        int kVisitedCount = 0;

        while(!q.isEmpty()){
            Point currentPoint = q.poll();
            for(int i=0; i<8; i++){
                int nextX = currentPoint.x + dx[i];
                int nextY = currentPoint.y + dy[i];

                if(nextX>=0 && nextX<N && nextY>=0 && nextY<N
                    && map[nextX][nextY].altitude >= altLow
                    && map[nextX][nextY].altitude <= altHigh
                ) {
                    if(visited[nextX][nextY]) continue;

                    visited[nextX][nextY] = true;
                    if(map[nextX][nextY].type == 'K'){
                        kVisitedCount++;
                        if(kCount == kVisitedCount){
                            return true;
                        }
                    }
                    q.add(map[nextX][nextY]);
                }
            }
        }

        return false;
    }
}

# Main_11003_최솟값찾기
package Chap2_Data_Structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.StringTokenizer;

public class Main_11003_최솟값찾기 {
    static int N, L;
    static class A {
        int index;
        int value;
        public A(int index, int value){
            this.index = index;
            this.value = value;
        }
    }

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringBuilder sb = new StringBuilder();

        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());

        // L 크기의 윈도우 내에서 최솟값을 구하라
        // -> dequeue 을 L 크기로 유지
        // -> 현재 최솟값은 deque의 첫번째 객체
        ArrayDeque<A> deque = new ArrayDeque<>();

        st = new StringTokenizer(br.readLine());
        int input = 0;
        for(int i=0; i<N; i++){
            input = Integer.parseInt(st.nextToken());

            // 1. 들어오는 node 값 보다 deque의 마지막 객체의 값이 크면 해당 객체 삭제
            while(!deque.isEmpty() && deque.peekLast().value >  input){
                deque.removeLast();
            }
            
            deque.add(new A(i, input));

            // 2. 윈도우 범위에서 index가 벗어나면 deque에서 첫번째 객체 삭제
            if(deque.peekFirst().index <= i-L){
                deque.removeFirst();
            }

            sb.append(deque.peekFirst().value + " ");
        }
        br.close();

        bw.write(sb.toString());
        bw.flush();
        bw.close();
    }
}
